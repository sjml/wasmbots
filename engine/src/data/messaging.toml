[meta]
namespace = "WasmBots"
list_size_type = "uint16"
string_size_type = "byte"

# used internally for handling host <-> module mishaps
[[messages]]
_name = "_Error"
description = "string"

[[enums]]
_name = "GameMode"
_values = [
	"Wander", # the proof-of-concept "navigate with no stakes" mode
	"Attain", # find the amulet
]

# initial setup message that you can either accept or reject
[[messages]]
_name = "InitialParameters"
paramsVersion = "uint16"       # version of this very message, so you know if you can parse the rest
engineVersionMajor = "uint16"  # major version of engine
engineVersionMinor = "uint16"  # minor version of engine
engineVersionPatch = "uint16"  # patch version of engine
diagonalMovement = "bool"      # if false, any attempted diagonal move will be Invalid
playerStride = "byte"          # how far you can move on a given turn
playerOpenReach = "byte"       # the distance at which you can open things (doors, chests)
gameMode = "GameMode"          # what type of game we're going to play

[[structs]]
_name = "Point"
x = "int16"
y = "int16"


[[enums]]
_name = "MoveResult"
_values = [
	"Succeeded",  # your move worked (ex: attack hit, moved successfully)
	"Failed",     # your move did not work (ex: attack missed, moved into wall)
	"Invalid",    # your move was not allowed by the system (ex: tried diagonal movement when not allowed, targeted something out of range)
	"Error",      # your move was not understood (ex: malformed message, missing data)
]

[[enums]]
_name = "TileType"
_values = [
	"Void",        # you don't know what's there; might be off the edge of the map, or maybe just behind a wall
	"Floor",       # an open space you can move to
	"OpenDoor",    # a door space that you can pass through or take a turn to target with Close
	"ClosedDoor",  # an impassable door space that you can take a turn to target with Open
	"Wall",        # an impassable space
]

[[enums]]
_name = "Direction"
_values = [
	"North",
	"Northeast",
	"East",
	"Southeast",
	"South",
	"Southwest",
	"West",
	"Northwest",
]

[[enums]]
_name = "EntityType"
_values = [
	"Player",
	"Item",
]

[[structs]]
_name = "Entity"
id = "uint32"
type = "EntityType"
surroundingsIndex = "uint16"
label = "string"
dataByteA = "byte"
dataByteB = "byte"
dataIntA = "int32"
dataIntB = "int32"

[[enums]]
_name = "ItemType"
_values = [
	"Stone",
	"Amulet",
]

# player receives every tick
[[messages]]
_name = "PresentCircumstances"  # describes your immediate situation and surroundings at the start of this turn
lastTickDuration = "uint32"     # how long, in milliseconds, you took on the last tick (will be 0 on initial turn)
lastMoveResult = "MoveResult"   # the result of your last turn (will be Succeeded on initial turn)
currentHitPoints = "uint16"     # how many hit points you have
surroundings = "[TileType]"     # array of tiles representing your immediate surroundings as a square with you in the middle
surroundingsRadius = "byte"     # radius (from you) of the surroundings, so the side of a square is (this * 2) + 1
visibleEntities = "[Entity]"    # array of entities within your current field of view

### moves that the player submits

[[messages]]
_name = "Wait"  # no-op; don't do anything and wait for the next tick

[[messages]]
_name = "Resign"  # give up the game; you will receive no more tick calls after submitting this move

[[messages]]
_name = "MoveTo"         # move to a new tile
direction = "Direction"  # which way to move
distance = "byte"        # how far to move (can usually just be 1, but might be modified); if you put a number that is beyond your max range, the move will be Invalid

[[messages]]
_name = "Open"     # open (a door, a chest, etc.) at a specific tile
target = "Point"   # the position *relative to you* that you want to try to open; can usually only be one square away (manhattan distance); if already opened, move will fail; if target is not openable, move will be Invalid

[[messages]]
_name = "Close"    # close (a door, a chest, etc.) at a specific tile
target = "Point"   # the position *relative to you* that you want to try to close; can usually only be one square away (manhattan distance); if already closed, move will fail; if target is not closable, move will be Invalid

